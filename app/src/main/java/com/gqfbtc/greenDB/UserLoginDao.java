package com.gqfbtc.greenDB;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.gqfbtc.entity.bean.UserLogin;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_LOGIN".
*/
public class UserLoginDao extends AbstractDao<UserLogin, Long> {

    public static final String TABLENAME = "USER_LOGIN";

    /**
     * Properties of entity UserLogin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property NickName = new Property(2, String.class, "nickName", false, "NICK_NAME");
        public final static Property Password = new Property(3, String.class, "password", false, "PASSWORD");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property CreateTime = new Property(6, long.class, "createTime", false, "CREATE_TIME");
        public final static Property UpdateTime = new Property(7, long.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Avatar = new Property(8, String.class, "avatar", false, "AVATAR");
        public final static Property CanSendAd = new Property(9, boolean.class, "canSendAd", false, "CAN_SEND_AD");
        public final static Property CanTrade = new Property(10, boolean.class, "canTrade", false, "CAN_TRADE");
        public final static Property CanWithdraw = new Property(11, boolean.class, "canWithdraw", false, "CAN_WITHDRAW");
        public final static Property Sponsor = new Property(12, String.class, "sponsor", false, "SPONSOR");
        public final static Property IsAuth = new Property(13, boolean.class, "isAuth", false, "IS_AUTH");
        public final static Property ImToken = new Property(14, String.class, "imToken", false, "IM_TOKEN");
        public final static Property CanAssure = new Property(15, boolean.class, "canAssure", false, "CAN_ASSURE");
        public final static Property Discount = new Property(16, int.class, "discount", false, "DISCOUNT");
        public final static Property FeeRate = new Property(17, int.class, "feeRate", false, "FEE_RATE");
        public final static Property OnLine = new Property(18, boolean.class, "onLine", false, "ON_LINE");
    }


    public UserLoginDao(DaoConfig config) {
        super(config);
    }
    
    public UserLoginDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_LOGIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"NICK_NAME\" TEXT," + // 2: nickName
                "\"PASSWORD\" TEXT," + // 3: password
                "\"EMAIL\" TEXT," + // 4: email
                "\"PHONE\" TEXT," + // 5: phone
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 6: createTime
                "\"UPDATE_TIME\" INTEGER NOT NULL ," + // 7: updateTime
                "\"AVATAR\" TEXT," + // 8: avatar
                "\"CAN_SEND_AD\" INTEGER NOT NULL ," + // 9: canSendAd
                "\"CAN_TRADE\" INTEGER NOT NULL ," + // 10: canTrade
                "\"CAN_WITHDRAW\" INTEGER NOT NULL ," + // 11: canWithdraw
                "\"SPONSOR\" TEXT," + // 12: sponsor
                "\"IS_AUTH\" INTEGER NOT NULL ," + // 13: isAuth
                "\"IM_TOKEN\" TEXT," + // 14: imToken
                "\"CAN_ASSURE\" INTEGER NOT NULL ," + // 15: canAssure
                "\"DISCOUNT\" INTEGER NOT NULL ," + // 16: discount
                "\"FEE_RATE\" INTEGER NOT NULL ," + // 17: feeRate
                "\"ON_LINE\" INTEGER NOT NULL );"); // 18: onLine
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_LOGIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserLogin entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
        stmt.bindLong(7, entity.getCreateTime());
        stmt.bindLong(8, entity.getUpdateTime());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(9, avatar);
        }
        stmt.bindLong(10, entity.getCanSendAd() ? 1L: 0L);
        stmt.bindLong(11, entity.getCanTrade() ? 1L: 0L);
        stmt.bindLong(12, entity.getCanWithdraw() ? 1L: 0L);
 
        String sponsor = entity.getSponsor();
        if (sponsor != null) {
            stmt.bindString(13, sponsor);
        }
        stmt.bindLong(14, entity.getIsAuth() ? 1L: 0L);
 
        String imToken = entity.getImToken();
        if (imToken != null) {
            stmt.bindString(15, imToken);
        }
        stmt.bindLong(16, entity.getCanAssure() ? 1L: 0L);
        stmt.bindLong(17, entity.getDiscount());
        stmt.bindLong(18, entity.getFeeRate());
        stmt.bindLong(19, entity.getOnLine() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserLogin entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(3, nickName);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(4, password);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
        stmt.bindLong(7, entity.getCreateTime());
        stmt.bindLong(8, entity.getUpdateTime());
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(9, avatar);
        }
        stmt.bindLong(10, entity.getCanSendAd() ? 1L: 0L);
        stmt.bindLong(11, entity.getCanTrade() ? 1L: 0L);
        stmt.bindLong(12, entity.getCanWithdraw() ? 1L: 0L);
 
        String sponsor = entity.getSponsor();
        if (sponsor != null) {
            stmt.bindString(13, sponsor);
        }
        stmt.bindLong(14, entity.getIsAuth() ? 1L: 0L);
 
        String imToken = entity.getImToken();
        if (imToken != null) {
            stmt.bindString(15, imToken);
        }
        stmt.bindLong(16, entity.getCanAssure() ? 1L: 0L);
        stmt.bindLong(17, entity.getDiscount());
        stmt.bindLong(18, entity.getFeeRate());
        stmt.bindLong(19, entity.getOnLine() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public UserLogin readEntity(Cursor cursor, int offset) {
        UserLogin entity = new UserLogin( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.getLong(offset + 6), // createTime
            cursor.getLong(offset + 7), // updateTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // avatar
            cursor.getShort(offset + 9) != 0, // canSendAd
            cursor.getShort(offset + 10) != 0, // canTrade
            cursor.getShort(offset + 11) != 0, // canWithdraw
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // sponsor
            cursor.getShort(offset + 13) != 0, // isAuth
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // imToken
            cursor.getShort(offset + 15) != 0, // canAssure
            cursor.getInt(offset + 16), // discount
            cursor.getInt(offset + 17), // feeRate
            cursor.getShort(offset + 18) != 0 // onLine
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserLogin entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreateTime(cursor.getLong(offset + 6));
        entity.setUpdateTime(cursor.getLong(offset + 7));
        entity.setAvatar(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCanSendAd(cursor.getShort(offset + 9) != 0);
        entity.setCanTrade(cursor.getShort(offset + 10) != 0);
        entity.setCanWithdraw(cursor.getShort(offset + 11) != 0);
        entity.setSponsor(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setIsAuth(cursor.getShort(offset + 13) != 0);
        entity.setImToken(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCanAssure(cursor.getShort(offset + 15) != 0);
        entity.setDiscount(cursor.getInt(offset + 16));
        entity.setFeeRate(cursor.getInt(offset + 17));
        entity.setOnLine(cursor.getShort(offset + 18) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserLogin entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserLogin entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserLogin entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
